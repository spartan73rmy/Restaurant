//------------------------------------------------------------------------------
// <auto-generated>
//     Este código se generó a partir de una plantilla.
//
//     Los cambios manuales en este archivo pueden causar un comportamiento inesperado de la aplicación.
//     Los cambios manuales en este archivo se sobrescribirán si se regenera el código.
// </auto-generated>
//------------------------------------------------------------------------------

namespace CapaAccesoDatos
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class RestaurantEntities : DbContext
    {
        public RestaurantEntities()
            : base("name=RestaurantEntities")
        {
            this.Configuration.LazyLoadingEnabled = false;
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<CategoriaProducto> CategoriaProducto { get; set; }
        public virtual DbSet<CategoriaProductoImagen> CategoriaProductoImagen { get; set; }
        public virtual DbSet<Cliente> Cliente { get; set; }
        public virtual DbSet<EstadoMesa> EstadoMesa { get; set; }
        public virtual DbSet<FormasPago> FormasPago { get; set; }
        public virtual DbSet<Mesa> Mesa { get; set; }
        public virtual DbSet<Orden> Orden { get; set; }
        public virtual DbSet<OrdenProducto> OrdenProducto { get; set; }
        public virtual DbSet<Pago> Pago { get; set; }
        public virtual DbSet<Pedido> Pedido { get; set; }
        public virtual DbSet<Producto> Producto { get; set; }
        public virtual DbSet<ProductoImagen> ProductoImagen { get; set; }
        public virtual DbSet<ProductoVariante> ProductoVariante { get; set; }
        public virtual DbSet<Puesto> Puesto { get; set; }
        public virtual DbSet<RegistroProductoVenta> RegistroProductoVenta { get; set; }
        public virtual DbSet<Reservacion> Reservacion { get; set; }
        public virtual DbSet<TipoProducto> TipoProducto { get; set; }
        public virtual DbSet<Trabajador> Trabajador { get; set; }
        public virtual DbSet<TrabajadorImagen> TrabajadorImagen { get; set; }
        public virtual DbSet<User> User { get; set; }
        public virtual DbSet<RegistroProducto> RegistroProducto { get; set; }
    
        public virtual int agregarOrdenProducto(Nullable<int> iDOrden, Nullable<int> iDTipoProducto, string iDVariantes, Nullable<int> cantidad, string comentarios)
        {
            var iDOrdenParameter = iDOrden.HasValue ?
                new ObjectParameter("IDOrden", iDOrden) :
                new ObjectParameter("IDOrden", typeof(int));
    
            var iDTipoProductoParameter = iDTipoProducto.HasValue ?
                new ObjectParameter("IDTipoProducto", iDTipoProducto) :
                new ObjectParameter("IDTipoProducto", typeof(int));
    
            var iDVariantesParameter = iDVariantes != null ?
                new ObjectParameter("IDVariantes", iDVariantes) :
                new ObjectParameter("IDVariantes", typeof(string));
    
            var cantidadParameter = cantidad.HasValue ?
                new ObjectParameter("Cantidad", cantidad) :
                new ObjectParameter("Cantidad", typeof(int));
    
            var comentariosParameter = comentarios != null ?
                new ObjectParameter("Comentarios", comentarios) :
                new ObjectParameter("Comentarios", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("agregarOrdenProducto", iDOrdenParameter, iDTipoProductoParameter, iDVariantesParameter, cantidadParameter, comentariosParameter);
        }
    
        public virtual int editarOrdenProducto(Nullable<int> iDOrdenProducto, Nullable<int> iDTipoProducto, string iDVariantes, Nullable<int> cantidad, string comentarios, string status)
        {
            var iDOrdenProductoParameter = iDOrdenProducto.HasValue ?
                new ObjectParameter("IDOrdenProducto", iDOrdenProducto) :
                new ObjectParameter("IDOrdenProducto", typeof(int));
    
            var iDTipoProductoParameter = iDTipoProducto.HasValue ?
                new ObjectParameter("IDTipoProducto", iDTipoProducto) :
                new ObjectParameter("IDTipoProducto", typeof(int));
    
            var iDVariantesParameter = iDVariantes != null ?
                new ObjectParameter("IDVariantes", iDVariantes) :
                new ObjectParameter("IDVariantes", typeof(string));
    
            var cantidadParameter = cantidad.HasValue ?
                new ObjectParameter("Cantidad", cantidad) :
                new ObjectParameter("Cantidad", typeof(int));
    
            var comentariosParameter = comentarios != null ?
                new ObjectParameter("Comentarios", comentarios) :
                new ObjectParameter("Comentarios", typeof(string));
    
            var statusParameter = status != null ?
                new ObjectParameter("Status", status) :
                new ObjectParameter("Status", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("editarOrdenProducto", iDOrdenProductoParameter, iDTipoProductoParameter, iDVariantesParameter, cantidadParameter, comentariosParameter, statusParameter);
        }
    
        public virtual ObjectResult<getPedidosDeOrden_Result> getPedidosDeOrden(Nullable<int> iDOrden)
        {
            var iDOrdenParameter = iDOrden.HasValue ?
                new ObjectParameter("IDOrden", iDOrden) :
                new ObjectParameter("IDOrden", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<getPedidosDeOrden_Result>("getPedidosDeOrden", iDOrdenParameter);
        }
    
        public virtual ObjectResult<getRegistroProducto_Result> getRegistroProducto(string chain)
        {
            var chainParameter = chain != null ?
                new ObjectParameter("chain", chain) :
                new ObjectParameter("chain", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<getRegistroProducto_Result>("getRegistroProducto", chainParameter);
        }
    
        public virtual ObjectResult<getTipoProductos_Result> getTipoProductos(Nullable<int> iDProducto)
        {
            var iDProductoParameter = iDProducto.HasValue ?
                new ObjectParameter("IDProducto", iDProducto) :
                new ObjectParameter("IDProducto", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<getTipoProductos_Result>("getTipoProductos", iDProductoParameter);
        }
    
        public virtual int sp_alterdiagram(string diagramname, Nullable<int> owner_id, Nullable<int> version, byte[] definition)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var versionParameter = version.HasValue ?
                new ObjectParameter("version", version) :
                new ObjectParameter("version", typeof(int));
    
            var definitionParameter = definition != null ?
                new ObjectParameter("definition", definition) :
                new ObjectParameter("definition", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_alterdiagram", diagramnameParameter, owner_idParameter, versionParameter, definitionParameter);
        }
    
        public virtual int sp_creatediagram(string diagramname, Nullable<int> owner_id, Nullable<int> version, byte[] definition)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var versionParameter = version.HasValue ?
                new ObjectParameter("version", version) :
                new ObjectParameter("version", typeof(int));
    
            var definitionParameter = definition != null ?
                new ObjectParameter("definition", definition) :
                new ObjectParameter("definition", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_creatediagram", diagramnameParameter, owner_idParameter, versionParameter, definitionParameter);
        }
    
        public virtual int sp_dropdiagram(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_dropdiagram", diagramnameParameter, owner_idParameter);
        }
    
        public virtual ObjectResult<sp_helpdiagramdefinition_Result> sp_helpdiagramdefinition(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_helpdiagramdefinition_Result>("sp_helpdiagramdefinition", diagramnameParameter, owner_idParameter);
        }
    
        public virtual ObjectResult<sp_helpdiagrams_Result> sp_helpdiagrams(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_helpdiagrams_Result>("sp_helpdiagrams", diagramnameParameter, owner_idParameter);
        }
    
        public virtual int sp_renamediagram(string diagramname, Nullable<int> owner_id, string new_diagramname)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var new_diagramnameParameter = new_diagramname != null ?
                new ObjectParameter("new_diagramname", new_diagramname) :
                new ObjectParameter("new_diagramname", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_renamediagram", diagramnameParameter, owner_idParameter, new_diagramnameParameter);
        }
    
        public virtual int sp_upgraddiagrams()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_upgraddiagrams");
        }
    
        [DbFunction("RestaurantEntities", "splitstring")]
        public virtual IQueryable<string> splitstring(string stringToSplit)
        {
            var stringToSplitParameter = stringToSplit != null ?
                new ObjectParameter("stringToSplit", stringToSplit) :
                new ObjectParameter("stringToSplit", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<string>("[RestaurantEntities].[splitstring](@stringToSplit)", stringToSplitParameter);
        }
    
        public virtual ObjectResult<RegistroProductoVenta> getRegistroProducto1(string chain)
        {
            var chainParameter = chain != null ?
                new ObjectParameter("chain", chain) :
                new ObjectParameter("chain", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<RegistroProductoVenta>("getRegistroProducto1", chainParameter);
        }
    
        public virtual ObjectResult<RegistroProductoVenta> getRegistroProducto1(string chain, MergeOption mergeOption)
        {
            var chainParameter = chain != null ?
                new ObjectParameter("chain", chain) :
                new ObjectParameter("chain", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<RegistroProductoVenta>("getRegistroProducto1", mergeOption, chainParameter);
        }
    }
}
